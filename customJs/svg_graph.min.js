var default_bar_color = "#fcbd74";
var default_shadow_bar_color = "#e78b89";
var max_bar_width = 15;
var bg_axis_color = "#ded7cf";
var total_bg_axis = 5;
var axis_color = "#acabab";
var axis_width = 2;
var axis_label_color = "#939598";
var max_num_label_to_show = 15;
var label_interval = 5;
var axis_left_space = 5;
var axis_right_space = 20;
var axis_bot_space = 70;
var axis_top_space = 50;
var shadowWidthPercentage = 0.2;
var graphLineMaxWidth = 30;
var graphLineArrowWidth = 50;
var arrowHeight = 25;
var graphLineSmallMaxWidth = 20;
var graphLineColor = "#d3263b";
var graphLineSmallColor = "#f15c22";
var svgGraph;

function drawAxis() {
    var f = $(document.createElementNS("http://www.w3.org/2000/svg", "line"));
    var e = $(document.createElementNS("http://www.w3.org/2000/svg", "line"));
    f.attr({
        "stroke-width": axis_width,
        stroke: axis_color,
        x1: axis_left_space,
        x2: svgGraph.width() - axis_right_space,
        y1: svgGraph.height() - axis_bot_space,
        y2: svgGraph.height() - axis_bot_space
    });
    e.attr({
        "stroke-width": axis_width,
        stroke: axis_color,
        x1: axis_left_space,
        x2: axis_left_space,
        y1: svgGraph.height() - axis_bot_space,
        y2: axis_top_space - 10
    });
    var d = svgGraph.find(".axis");
    d.append(f);
    d.append(e);
    var b = svgGraph.height() - axis_bot_space - axis_top_space - (axis_width / 2);
    for (var c = 0; c < total_bg_axis; c++) {
        var a = $(document.createElementNS("http://www.w3.org/2000/svg", "line")).attr({
            "stroke-width": axis_width,
            stroke: bg_axis_color,
            x1: axis_left_space + (axis_width / 2),
            x2: svgGraph.width() - axis_right_space,
            y1: axis_top_space + (b * c / total_bg_axis),
            y2: axis_top_space + (b * c / total_bg_axis)
        });
        d.append(a)
    }
}function Data(b, a) {
    if (a == "" || isNaN(a)) {
        a = default_bar_color
    }
    this.val = b;
    this.color = a
}function drawGraphData(f, k) {
    var m = svgGraph.find(".data");
    var p = svgGraph.width() - axis_left_space - (axis_width / 2) - axis_right_space;
    var a = svgGraph.height() - axis_bot_space - axis_top_space - (axis_width / 2);
    f = reaAdjustHeightValue(f, a);
    m.empty();
    totalData = f.length;
    var q = (p / totalData) / 2;
    var b = q / 2;
    if (q > max_bar_width) {
        b = b + ((q - max_bar_width) / 2);
        q = max_bar_width
    }
    var j = shadowWidthPercentage * q;
    for (i in f) {
        var n = $(document.createElementNS("http://www.w3.org/2000/svg", "g"));
        var e = axis_left_space + (axis_width / 2) + b + ((b * 2 + q) * i);
        var c = a - f[i].val + axis_top_space;
        var l = $(document.createElementNS("http://www.w3.org/2000/svg", "rect")).attr({
            x: e,
            y: c,
            width: q,
            height: f[i].val,
            fill: f[i].color,
            stroke: f[i].color
        });
        n.append(l);
        var g = new Array();
        g[0] = e + "," + (c + f[i].val);
        g[1] = e + "," + c;
        g[3] = (e + q) + "," + c;
        g[4] = (e + q - j) + "," + (c - j);
        g[5] = (e - j) + "," + (c - j);
        g[6] = (e - j) + "," + (c + f[i].val - j);
        var h = $(document.createElementNS("http://www.w3.org/2000/svg", "polygon")).attr({
            fill: default_shadow_bar_color,
            points: g.join(" ")
        });
        n.append(h);
        var d = false;
        if (f.length <= max_num_label_to_show) {
            d = true
        } else {
            if (i == 0) {
                d = true
            } else {
                if (i == f.length - 1) {
                    d = true
                } else {
                    if (((parseInt(i) + k) % label_interval) == 0) {
                        d = true
                    }
                }
            }
        }
        if (d) {
            var o = $(document.createElementNS("http://www.w3.org/2000/svg", "text")).attr({
                x: e + (q / 2),
                y: c + f[i].val + 20,
                fill: axis_label_color,
                "text-anchor": "middle"
            });
            o.css({
                "font-size": "14px"
            });
            o.html(parseInt(i) + k);
            n.append(o)
        }
        m.append(n)
    }
    drawGraphLine(f, a, q, b)
}function Point(a, b) {
    this.x = a;
    this.y = b
}function drawGraphLine(c, t, r, b) {
    var p = svgGraph.find(".dataLine");
    p.empty();
    var C = 0;
    var v = 0;
    var x = new Array();
    var K = new Array();
    var e = "";
    var h = "";
    for (G in c) {
        var u = axis_left_space + (axis_width / 2) + b + (r / 2) + ((b * 2 + r) * G);
        var L = t - c[G].val + axis_top_space;
        x[C++] = u + "," + L;
        K[v++] = u + "," + L;
        if (h == "") {
            e = new Point(u, L)
        } else {
            e = new Point(h.x, h.y)
        }
        h = new Point(u, L)
    }
    var f = e.y - h.y;
    var g = h.x - e.x;
    var k = Math.atan(f / g);
    var z = graphLineMaxWidth * Math.sin(k);
    var y = graphLineMaxWidth * Math.cos(k);
    var s = graphLineSmallMaxWidth * Math.sin(k);
    var q = graphLineSmallMaxWidth * Math.cos(k);
    var m = h.x - (z / 2);
    var l = h.y - (y / 2);
    var H = h.x - (s / 2);
    var F = h.y - (q / 2);
    var A = (graphLineArrowWidth - graphLineMaxWidth) / 2;
    var E = A * Math.sin(k);
    var D = A * Math.cos(k);
    var j = new Point(h.x + E, h.y + D);
    x[C++] = j.x + "," + j.y;
    K[v++] = j.x + "," + j.y;
    D = arrowHeight * Math.sin(k);
    E = arrowHeight * Math.cos(k);
    x[C++] = (H + E) + "," + (F - D);
    x[C++] = (m + E) + "," + (l - D);
    K[v++] = (H + E) + "," + (F - D);
    E = graphLineArrowWidth * Math.sin(k);
    D = graphLineArrowWidth * Math.cos(k);
    x[C++] = (j.x - E) + "," + (j.y - D);
    var B = (A * 2) + graphLineSmallMaxWidth;
    var J = B * Math.sin(k);
    var I = B * Math.cos(k);
    K[v++] = (j.x - J) + "," + (j.y - I);
    for (var G = c.length - 1; G >= 0; G--) {
        var u = axis_left_space + (axis_width / 2) + b + (r / 2) + ((b * 2 + r) * G);
        var L = t - c[G].val + axis_top_space;
        var a = u - (s / c.length * (G + 1));
        var n = L - (q / c.length * (G + 1));
        u = u - (z / c.length * (G + 1));
        L = L - (y / c.length * (G + 1));
        x[C++] = u + "," + L;
        K[v++] = a + "," + n
    }
    var o = $(document.createElementNS("http://www.w3.org/2000/svg", "polygon")).attr({
        fill: graphLineColor,
        points: x.join(" ")
    });
    var d = $(document.createElementNS("http://www.w3.org/2000/svg", "polygon")).attr({
        fill: graphLineSmallColor,
        points: K.join(" ")
    });
    p.append(o);
    p.append(d)
}function setMaxValueLabel(a) {
    a = formatNumber(Math.round(a), 0);
    var b = "$ " + a;
	
	if(a == "0")
	$("#maxValueGraph").html()
	else
    $("#maxValueGraph").html(b)
}function getMaxValue(b) {
    var a = 0;
    for (i in b) {
        if (b[i].val > a) {
            a = b[i].val
        }
    }
    return a
}function reaAdjustHeightValue(b, c) {
    var a = getMaxValue(b);
    setMaxValueLabel(a);
    var d = c / a;
    for (i in b) {
        b[i].val = b[i].val * d
    }
    return b
};